import subprocess as sp

from apscheduler.schedulers.blocking import BlockingScheduler

from apscheduler.triggers.date import DateTrigger

from apscheduler.executors.pool import ThreadPoolExecutor



import time

import datetime



 

 

# 创建调度器对象

scheduler = BlockingScheduler()

 

 

# 定义任务函数

def task_func1():



    out = sp.check_output('cd /home/wly/code/LLaMA-Efficient-Tuning-main  \

        && CUDA_VISIBLE_DEVICES=3 python src/train_bash.py \

    --stage sft \

    --model_name_or_path /data/SHARE/MODELS/THUDM/chatglm2-6b  \

    --do_eval \

    --dataset mrc_test \

    --template chatglm2 \

    --finetuning_type full \

    --checkpoint_dir /home/wly/code/LLaMA-Efficient-Tuning-main/output/sft/chatglm2_6b_mrc_full \

    --output_dir /home/wly/code/LLaMA-Efficient-Tuning-main/output/eval/chatglm2_6b_mrc_full \

    --per_device_eval_batch_size 8 \

    --max_samples 100 \

    --predict_with_generate',shell=True)

    print(out)

    print("执行任务1...")









# 定义任务函数

def task_func2():

    out = sp.check_output('cd /home/wly/code/LLaMA-Efficient-Tuning-main  \

        && CUDA_VISIBLE_DEVICES=3 python src/train_bash.py \

    --stage sft \

    --model_name_or_path /data/SHARE/MODELS/THUDM/chatglm2-6b  \

    --do_eval \

    --dataset mrc_test \

    --template chatglm2 \

    --finetuning_type full \

    --checkpoint_dir /home/wly/code/LLaMA-Efficient-Tuning-main/output/sft/chatglm2_6b_mrc_full \

    --output_dir /home/wly/code/LLaMA-Efficient-Tuning-main/output/eval/chatglm2_6b_mrc_full \

    --per_device_eval_batch_size 8 \

    --max_samples 100 \

    --predict_with_generate',shell=True)

    print(out)

    print("执行任务2...")





if __name__ == '__main__':

    # 为了防止全量和增量并发造成显存溢出，进而训练失败，设置同一时间只能有一个任务运行

    schedule = BlockingScheduler(executors={'default': ThreadPoolExecutor(1)})

    # schedule = BlockingScheduler()

    ##添加任务 依次往后顺延时间就行

    after_trigger1 = (datetime.datetime.now() + datetime.timedelta(seconds=10)).strftime("%Y-%m-%d %H:%M:%S")

    after_trigger2 = (datetime.datetime.now() + datetime.timedelta(minutes=5)).strftime("%Y-%m-%d %H:%M:%S")



    trigger1 = DateTrigger(run_date=after_trigger1)

    trigger2 = DateTrigger(run_date=after_trigger2)

    # 添加定时任务

    schedule.add_job(task_func1, trigger1)

    schedule.add_job(task_func2,trigger2)



    # 启动调度器

    schedule.print_jobs()

    schedule.start()





 

